# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        channel: [stable, beta, dev]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: macos-latest
            flutter_path: /Users/runner/hostedtoolcache/flutter
            TARGET: macos
          - os: ubuntu-latest
            flutter_path: /opt/hostedtoolcache/flutter
            TARGET: linux
          - os: windows-latest
            flutter_path: C:\hostedtoolcache\windows\flutter
            TARGET: windows

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: "15.x"

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: ${{ matrix.flutter_path }}
          key: ${{ matrix.os }}-{{matrix.channel}}-flutter

      - name: Install Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ matrix.channel }}

      - name: Install dependencies
        run: flutter pub get

      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev liblzma-dev libjsoncpp-dev clang
      - name: Enable desktop support
        run: |
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop

      - name: Configure project for desktop
        run: flutter create --project-name=betro --platforms=windows,macos,linux .

      - name: Doctor
        # Run doctor, for ease of debugging any issues.
        run: flutter doctor -v

      - name: Generate code
        run: flutter pub run build_runner build

      # Uncomment this step to verify the use of 'dart format' on each commit.
      - name: Verify formatting
        run: flutter format --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test --coverage

      - name: Build apk using debug key
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "C=US, O=Android, CN=Android Debug"
          echo "storeFile=$(pwd)/debug.keystore" >> android/key.properties
          echo "keyAlias=androiddebugkey" >> android/key.properties
          echo "keyPassword=android" >> android/key.properties
          echo "storePassword=android" >> android/key.properties
          flutter build -v apk --release

      - name: Build desktop
        run: |
          flutter packages get	
          flutter build -v ${{matrix.TARGET}} --release

      - uses: codecov/codecov-action@v1

      - uses: actions/upload-artifact@v2
        with:
          name: Release ${{ matrix.os }} on ${{ matrix.channel }}
          path: |
            build/macos/Build/Products/Release/
            build/linux/x64/release/bundle/
            build/windows/runner/Release/

      - uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: Release apk on ${{ matrix.channel }}
          path: build/app/outputs/flutter-apk/app-release.apk
