def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
    
    def versionPropsFile = file('version.properties')

    def Properties versionProps = new Properties()

    if(versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))

    List<String> runTasks = gradle.startParameter.getTaskNames();
    def value = 0
    for (String item : runTasks)
    if ( item.contains("assembleRelease") || item.contains("bundleRelease")) {
        value = 1;
    }
    def code = Integer.parseInt(versionProps['VERSION_CODE']  ?: "0" ).intValue() + value
    if (System.env.BUILD_NUMBER) {
        code = code + Integer.valueOf(System.env.BUILD_NUMBER ?: 0);
    }
    for (String item : runTasks)
    if ( item.contains("assembleRelease") || item.contains("bundleRelease")) {
        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    defaultConfig {
        applicationId "com.example.betro"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode code
        versionName '0.0.1'
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }

        release {
            signingConfig signingConfigs.release
            
            for (String item : runTasks)
            if ( item.contains("assembleRelease") || item.contains("bundleRelease")) {
                minifyEnabled true
                shrinkResources true
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
